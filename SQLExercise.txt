1. Write a query to select all columns from the 'employees' table.
CREATE TABLE employees ( id INT PRIMARY KEY,  first_name VARCHAR(50), last_name VARCHAR(50), position VARCHAR(100),department VARCHAR(100),salary DECIMAL(10, 2),hire_date DATE); 
INSERT INTO employees (id, first_name, last_name, position, department, salary, hire_date) VALUES
(1, 'Alice', 'Johnson', 'Software Engineer', 'IT', 85000.00, '2020-03-15'),
(2, 'Bob', 'Smith', 'Project Manager', 'Operations', 95000.00, '2018-07-22'),
(3, 'Carol', 'Davis', 'Data Analyst', 'Marketing', 72000.00, '2019-11-03'),
(4, 'David', 'Miller', 'HR Specialist', 'Human Resources', 60000.00, '2021-01-10'),
(5, 'Eva', 'Brown', 'Sales Executive', 'Sales', 67000.00, '2022-05-30');

Query:
    SELECT * from employees

Explanation: 
    SELECT is used to show the data while * is used display all columns.


2. Write a query to select 'first_name' and 'salary' from 'employees' where salary >
50000
    Query:
        SELECT first_name,salary from employees where salary>50000;

Explanation:     
        Where command is used to filter data based on the special condition.

3.retrieve all records from the departments table where department_name is sales.
    Query:
        Select*from department where department_name = 'sales';
Explanation: 
'select' is used to show the data.'where' is used to filter the data on the specific condition and '=' is used to compare the data

4.List all employees whose names start with 'A
    Query:
            select * from employee where employee_name LIKE A%;
    Explanation:
            Like is used to start for the string and % is used to start sequence of the character.
5.Display unqiue job titles from the 'jobs' table.
    query:
            SELECT DISTINCT job_title 
            FROM jobs;
    Explanation:
        'DISTINCT' is used to eliminate duplicates .'FROM' is used for take that particular column
6.Count how many employees are in each department.
    query:
        SELECT department_id, COUNT(*) AS employee_count
        FROM employees
        GROUP BY department_id;
    Explanation:
        Count(*) is used for counts all employees in each group
        Group BY is used for Groups the records by department so the count is calculated per department.

    7. Find the average salary in each department.
        query:
            SELECT department_id, AVG(salary) AS average_salary
            FROM employees
            GROUP BY department_id;
        Explanation:
           'AVG(Salary)' calculates the average salary of employees in each department.
           group by department_id groups the data department-wise so the average can be computed per department.
            as average_salary gives a readable name to the result column.
    8. List employees ordered by hire_date descending.
    query:
        SELECT * FROM employees 
        ORDER BY hire_date DESC;
    Explanation:
        selecting all from employees table and it is order by descding order
    9. Retrieve all departments that have more than 5 employees.
    query:
        SELECT department_id, COUNT(*) AS employee_count FROM employees
        GROUP BY department_id
        HAVING COUNT(*) > 5;
Explanation:
    having is used instead of where because filtering after aggression
    10. Display employee names in uppercase.
    query:
        SELECT UPPER(employee_name) AS uppercase_name
        FROM employees;
Explanation:
        while we're using the uppercase command the whole name will displayed in the uppercase.
    11. Show the length of each employee's first name.
        query:
            SELECT employee_name, LENGTH(employee_name) AS name_length
            FROM employees;
    explanation:
        'LENGTH' command is used to difine the length of the name.
    12. Show salary difference between highest and lowest paid employee.
        query:
            SELECT MAX(salary) - MIN(salary) AS salary_difference
            FROM employees;
        Explanation:
                MAX is for display the highest salary
                MIN is for display the lowest salary between the employees.
    13. Show all employees whose name contains the letter 'e'.
        query:
            SELECT * FROM employees 
            WHERE employee_name LIKE '%e%';
        Explanation:
            %e% is to get the aleast one e in the name it will be display the names.
    14. Write a query to find employees with NULL commission_pct.
        query:
            SELECT * FROM employees 
            WHERE commission_pct IS NULL;
        Explanation:
            Null is used to check the null values in sql and this display all are having null value.
    15. Write an INNER JOIN between 'employees' and 'departments' on department_id.
        query:
            SELECT e.employee_id, e.employee_name, e.department_id, d.department_name
            FROM employees e
            INNER JOIN departments d
            ON e.department_id = d.department_id;
        Explanation:
            Inner join is used to Returns only the rows where there is a match in both tables.
    16. Use LEFT JOIN to find employees even if they are not assigned to any department.
        query:
            SELECT e.employee_id, e.employee_name, e.department_id, d.department_name
            FROM employees e
            LEFT JOIN departments d
            ON e.department_id = d.department_id;
        Explanation:
            Returns all rows from the employees table, and matching rows from the departments table.
    17. List employee names along with their manager names using a self join.
        query:
            SELECT 
    e.employee_name AS employee,
    m.employee_name AS manager
    FROM employees e
   LEFT JOIN  employees m
   ON  e.manager_id = m.employee_id;
    explanation:
        e represents employee
        m represents manager
        Ensures employees without a manage are still included, with NULL as their manager name
    18. Write a query using RIGHT JOIN between 'jobs' and 'employees'.
    query:
        SELECT *FROM jobs j
        RIGHT JOIN employees e
        ON j.job_id = e.job_id;
    Explanation:
        return all form the employee table and matching rows from the jobs table.
        two joins on the table base.
19. Perform a FULL OUTER JOIN between 'departments' and 'employees'
    query:
SELECT 
    d.department_id,
    d.department_name,
    e.employee_id,
    e.employee_name
FROM 
    departments d
LEFT JOIN 
    employees e ON d.department_id = e.department_id

UNION

SELECT 
    d.department_id,
    d.department_name,
    e.employee_id,
    e.employee_name
FROM 
    departments d
RIGHT JOIN 
    employees e ON d.department_id = e.department_id;
Explanation:
First select left join get all departments and their employees, second select right join get all employees and their departments and then union combines both joins and removes duplicate and then create full outer join.
20.Show total salary paid per job_id.
query:
    SELECT job_id, 
    SUM(salary) AS total_salary
    FROM employees
    GROUP BY job_id;
    explanation:
    Adds all form the each table
    group the records form the job role
21. Find the department with the maximum total salary.
query:
    SELECT department_id, 
    SUM(salary) AS total_salary
    FROM  employees
    GROUP BY   department_id
    ORDER BY total_salary DESC
    LIMIT 1;
Explanation:
This SQL query groups salaries by department, sums them up, and orders by the highest total.
It then returns the department with the maximum total `querysalary` using `LIMIT 1`.
22. Display departments with average salary above 60000.
query:
    SELECT department, AVG(querysalary) AS avg_salary
    FROM your_table
    GROUP BY department
    HAVING AVG(querysalary) > 60000;
Explanation:
This query calculates the average salary per department and filters only those where the average is above 60,000 using the `HAVING` clause.
23.Count number of employees in each job group.
query:
    SELECT job_group, COUNT(*) AS employee_count
    FROM your_table
    GROUP BY job_group;
24. List all job titles with their maximum and minimum salary.
query:
    SELECT job_title, MAX(querysalary) AS max_salary, MIN(querysalary) AS min_salary
    FROM your_table
    GROUP BY job_title;
Explanation:
    The query groups data by job title and used max and min to find the highest and lowest salaries for each title.
25. Find employees earning more than the average salary.
Query:
    SELECT *FROM your_table
    WHERE querysalary > (SELECT AVG(querysalary) FROM your_table);
Explanation:
    The query selects employees whose salary is greater than the overall average salary, calculated using a subquery.
26. List departments where the maximum salary is over 100000.
Query:
    SELECT department FROM your_table
    GROUP BY department
    HAVING MAX(querysalary) > 100000;
Explanation:
The query groups the data by department and uses HAVING condition to return only those where the highest salary excting 100,000.
27. Get names of employees who work in the same department as 'John'.
 Query:
    SELECT name FROM your_table
    WHERE department = (SELECT department FROM your_table
    WHERE name = 'John');
Explanation:
     query finds all employees whose department matches the one that john works in using a subquery to get Johns department.
28. List employees who are not managers (no one reports to them).
Query:
    SELECT *FROM your_table
    WHERE employee_id NOT IN (SELECT manager_id
    FROM your_table
    WHERE manager_id IS NOT NULL);
Explanation:
    This query selects employees whose employee id is not listed as a manager id for anyone else no one reports to them.
29. Find employees hired before their managers.
Query:
    SELECT e.name AS employee_name, e.hire_date AS employee_hire_date, m.name AS manager_name, m.hire_date AS manager_hire_date
    FROM your_table e
    JOIN your_table m ON e.manager_id = m.employee_id
    WHERE e.hire_date < m.hire_date;
Explantion:
    This query joins employees with their managers and lists those employees whose hire date is earlier than their manager’s hire date.
30. Concatenate first_name and last_name as 'Full Name'.
    query:
        SELECT CONCAT(first_name, ' ', last_name) AS "Full Name"
        FROM your_table;
Explanation:
    This query combines first name and last name with a space in between to create a single column called Full Name.
31. Extract the month from hire_date.
    Query:
        SELECT CONCAT(first_name, ' ', last_name) AS "Full Name"
        FROM your_table;
Explanation:
    This query combines first name and last name with a space in between to create a single column called Full Name.
32. Show current system date and time.
Query:
    SELECT CURRENT_TIMESTAMP AS current_date_time;
Explanation:
This query retrieves the current system date and time using the CURRENT TIMESTAMP function.
33. Round all salaries to 2 decimal places.
Query:
    SELECT ROUND(querysalary, 2) AS rounded_salary
    FROM your_table;
Explanation:
This query rounds the querysalary values to 2 decimal places using the ROUND() function.
34. Display absolute difference in salaries between two employees.
Query:
    SELECT ABS(e1.querysalary - e2.querysalary) AS salary_difference
    FROM your_table e1, your_table e2
    WHERE e1.employee_id = :employee_id_1
     AND e2.employee_id = :employee_id_2;
Explanation:
 query calculates the absolute difference between the salaries of two employees identified by their IDs using the ABS function.
35.List employees with salary between 50000 and 80000.
Query:
    SELECT *FROM your_table
    WHERE querysalary BETWEEN 50000 AND 80000;
Explanation:
 query selects employees whose salaries fall within the range of 50,000 to 80,000 using the BETWEEN operator.
36. Create a table named 'projects' with columns: id, name, start_date.
Query:
    CREATE TABLE projects (id INT PRIMARY KEY,name VARCHAR(100),start_date DATE);
Explantion:
This query creates a projects table with an integer id as the primary key name column for project names and a start date column for the project’s start date.
37. Add a NOT NULL constraint to 'start_date' in 'projects'.
    Query:
        ALTER TABLE projects
        MODIFY start_date DATE NOT NULL;
Explanation:
    This query modifies the `start_date` column in the `projects` table to add a `NOT NULL` constraint, ensuring every project must have        a start date.
38. Insert a record into 'projects' table.
     Query:
        INSERT INTO projects (id, name, start_date)
        VALUES (1, 'Project Alpha', '2025-06-12');
Explanation:
     query inserts a new project record with id 1 name Project Alpha and start date June 12 2025 into the projects table.
39. Delete a project with id = 3 from 'projects'.
    Query:
        DELETE FROM projects WHERE id = 3;
Explanation:
 query deletes the project record from the projects table where the id is 3.
40. Alter 'projects' to add column 'status' with default 'active'.
Query:
    ALTER TABLE projects
    ADD COLUMN status VARCHAR(20) DEFAULT 'active';
Explanation:
 query adds a new column status to the projects table with a default value of active for all existing and new records.
41. Start a transaction, update an employee's salary, then rollback.
    query:
        START TRANSACTION;
        UPDATE employees
        SET salary = salary + 5000
        WHERE employee_id = 101;
        SELECT * FROM employees WHERE employee_id = 101;
        ROLLBACK;
        SELECT * FROM employees WHERE employee_id = 101;
Explanation:
    Start a transaction, update the salary, then rollback to undo the change. It’s like trying something out and then hitting undo.
42. Use COMMIT to save changes after updating the 'departments' table.
    query:
        START TRANSACTION;
        UPDATE departments
        SET department_name = 'Marketing'
        WHERE department_id = 3;
        COMMIT;
Explanation:
    update the department name and then use commit to save the change permanently. Without commit, the update wouldn’t be saved.
43. Explain a use case for SAVEPOINT and demonstrate it with queries.
    query:
        START TRANSACTION;
        UPDATE employees SET salary = salary + 1000 WHERE employee_id = 101;
        SAVEPOINT raise_done;
        UPDATE employees SET department_id = 5 WHERE employee_id = 101;
        ROLLBACK TO SAVEPOINT raise_done;
        COMMIT;
    Explanation:
         update salary and set a savepoint. Then you update the department, but if that update is wrong, you rollback only to the                  savepoint.Finally, commit the rest.
44. Create a view for employees with salary > 70000.
    query:
        CREATE VIEW high_earners AS
        SELECT *FROM employees
        WHERE salary > 70000;
    Explanation:
         creates a view called high_earners that shows only employees earning more than 70,000. It’s like a saved query you can use                 anytime without rewriting the full condition.
45. Drop the view 'high_salary_employees'.
    query:
        DROP VIEW high_salary_employees;
    Explanation:
    This command deletes the view named high_salary_employees from the database. It removes the saved query definition but doesn’t affect      the actual employee data
46. Create an index on 'last_name' in 'employees' table.
    query:
    CREATE INDEX idx_last_name ON employees(last_name);
    Explanation:
        This creates an index on the last_name column in the employees table to speed up searches and queries that filter or sort by last         name. It helps the database find rows faster.
47. Drop the index from 'employees' table.
query:
    DROP INDEX idx_last_name ON employees;
Explantion:
    This removes the index named idx_last_name from the employees table, which means queries on last_name might become slower since the         database won’t have the index to speed them up anymore.
48. Use ROW_NUMBER() to rank employees by salary within each department.
query:
    SELECT employee_id, department_id, salary,
     ROW_NUMBER() OVER (PARTITION BY department_id ORDER BY salary DESC) AS salary_rank
    FROM employees;
Explanation:
This assigns a rank number to employees based on their salary within each department. The highest salary in a department gets rank 1, the next highest gets rank 2, and so on. It helps compare salaries department-wise.
49. Use RANK() to identify top 3 earners per department.
    query:
        SELECT employee_id, department_id, salary,
      RANK() OVER (PARTITION BY department_id ORDER BY salary DESC) AS salary_rank
    FROM employees
    WHERE RANK() OVER (PARTITION BY department_id ORDER BY salary DESC) <= 3;
Explanation:
    RANK() assigns ranks to employees by salary within each department.
    Employees with the same salary get the same rank.
    The query filters to show only the top 3 earners (rank 1, 2, or 3) in each department.
50. Use DENSE_RANK() for same salary employees.
query:
    SELECT employee_id,
    department_id,
    salary,
  DENSE_RANK() OVER (PARTITION BY department_id ORDER BY salary DESC) AS dense_rank
    FROM employees;
Explanation:
    DENSE_RANK() assigns ranks to employees by salary within each department, just like RANK(). But unlike RANK(), it doesn’t skip ranks if there are ties. So if two employees tie for 1st place, the next rank is 2 (not 3). This gives a continuous ranking without gaps.
        

        

















    






        

    










    





    







    




        


            






    




