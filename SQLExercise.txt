1. Write a query to select all columns from the 'employees' table.
CREATE TABLE employees ( id INT PRIMARY KEY,  first_name VARCHAR(50), last_name VARCHAR(50), position VARCHAR(100),department VARCHAR(100),salary DECIMAL(10, 2),hire_date DATE); 
INSERT INTO employees (id, first_name, last_name, position, department, salary, hire_date) VALUES
(1, 'Alice', 'Johnson', 'Software Engineer', 'IT', 85000.00, '2020-03-15'),
(2, 'Bob', 'Smith', 'Project Manager', 'Operations', 95000.00, '2018-07-22'),
(3, 'Carol', 'Davis', 'Data Analyst', 'Marketing', 72000.00, '2019-11-03'),
(4, 'David', 'Miller', 'HR Specialist', 'Human Resources', 60000.00, '2021-01-10'),
(5, 'Eva', 'Brown', 'Sales Executive', 'Sales', 67000.00, '2022-05-30');

Query:
    SELECT * from employees

Explanation: 
    SELECT is used to show the data while * is used display all columns.


2. Write a query to select 'first_name' and 'salary' from 'employees' where salary >
50000
    Query:
        SELECT first_name,salary from employees where salary>50000;

Explanation:     
        Where command is used to filter data based on the special condition.

3.retrieve all records from the departments table where department_name is sales.
    Query:
        Select*from department where department_name = 'sales';
Explanation: 
'select' is used to show the data.'where' is used to filter the data on the specific condition and '=' is used to compare the data

4.List all employees whose names start with 'A
    Query:
            select * from employee where employee_name LIKE A%;
    Explanation:
            Like is used to start for the string and % is used to start sequence of the character.
5.Display unqiue job titles from the 'jobs' table.
    query:
            SELECT DISTINCT job_title 
            FROM jobs;
    Explanation:
        'DISTINCT' is used to eliminate duplicates .'FROM' is used for take that particular column
6.Count how many employees are in each department.
    query:
        SELECT department_id, COUNT(*) AS employee_count
        FROM employees
        GROUP BY department_id;
    Explanation:
        Count(*) is used for counts all employees in each group
        Group BY is used for Groups the records by department so the count is calculated per department.

    7. Find the average salary in each department.
        query:
            SELECT department_id, AVG(salary) AS average_salary
            FROM employees
            GROUP BY department_id;
        Explanation:
           'AVG(Salary)' calculates the average salary of employees in each department.
           group by department_id groups the data department-wise so the average can be computed per department.
            as average_salary gives a readable name to the result column.
    8. List employees ordered by hire_date descending.
    query:
        SELECT * FROM employees 
        ORDER BY hire_date DESC;
    Explanation:
        selecting all from employees table and it is order by descding order
    9. Retrieve all departments that have more than 5 employees.
    query:
        SELECT department_id, COUNT(*) AS employee_count FROM employees
        GROUP BY department_id
        HAVING COUNT(*) > 5;
Explanation:
    having is used instead of where because filtering after aggression
    10. Display employee names in uppercase.
    query:
        SELECT UPPER(employee_name) AS uppercase_name
        FROM employees;
Explanation:
        while we're using the uppercase command the whole name will displayed in the uppercase.
    11. Show the length of each employee's first name.
        query:
            SELECT employee_name, LENGTH(employee_name) AS name_length
            FROM employees;
    explanation:
        'LENGTH' command is used to difine the length of the name.
    12. Show salary difference between highest and lowest paid employee.
        query:
            SELECT MAX(salary) - MIN(salary) AS salary_difference
            FROM employees;
        Explanation:
                MAX is for display the highest salary
                MIN is for display the lowest salary between the employees.
    13. Show all employees whose name contains the letter 'e'.
        query:
            SELECT * FROM employees 
            WHERE employee_name LIKE '%e%';
        Explanation:
            %e% is to get the aleast one e in the name it will be display the names.
    14. Write a query to find employees with NULL commission_pct.
        query:
            SELECT * FROM employees 
            WHERE commission_pct IS NULL;
        Explanation:
            Null is used to check the null values in sql and this display all are having null value.
    15. Write an INNER JOIN between 'employees' and 'departments' on department_id.
        query:
            SELECT e.employee_id, e.employee_name, e.department_id, d.department_name
            FROM employees e
            INNER JOIN departments d
            ON e.department_id = d.department_id;
        Explanation:
            Inner join is used to Returns only the rows where there is a match in both tables.
    16. Use LEFT JOIN to find employees even if they are not assigned to any department.
        query:
            SELECT e.employee_id, e.employee_name, e.department_id, d.department_name
            FROM employees e
            LEFT JOIN departments d
            ON e.department_id = d.department_id;
        Explanation:
            Returns all rows from the employees table, and matching rows from the departments table.
    17. List employee names along with their manager names using a self join.
        query:
            SELECT 
    e.employee_name AS employee,
    m.employee_name AS manager
    FROM employees e
   LEFT JOIN  employees m
   ON  e.manager_id = m.employee_id;
    explanation:
        e represents employee
        m represents manager
        Ensures employees without a manage are still included, with NULL as their manager name
    18. Write a query using RIGHT JOIN between 'jobs' and 'employees'.
    query:
        SELECT *FROM jobs j
        RIGHT JOIN employees e
        ON j.job_id = e.job_id;
    Explanation:
        return all form the employee table and matching rows from the jobs table.
        two joins on the table base.
19. Perform a FULL OUTER JOIN between 'departments' and 'employees'
    query:
SELECT 
    d.department_id,
    d.department_name,
    e.employee_id,
    e.employee_name
FROM 
    departments d
LEFT JOIN 
    employees e ON d.department_id = e.department_id

UNION

SELECT 
    d.department_id,
    d.department_name,
    e.employee_id,
    e.employee_name
FROM 
    departments d
RIGHT JOIN 
    employees e ON d.department_id = e.department_id;
Explanation:
First select left join get all departments and their employees, second select right join get all employees and their departments and then union combines both joins and removes duplicate and then create full outer join.
20.Show total salary paid per job_id.
query:
    SELECT job_id, 
    SUM(salary) AS total_salary
    FROM employees
    GROUP BY job_id;
    explanation:
    Adds all form the each table
    group the records form the job role
21. Find the department with the maximum total salary.
query:
    SELECT department_id, 
    SUM(salary) AS total_salary
    FROM  employees
    GROUP BY   department_id
    ORDER BY total_salary DESC
    LIMIT 1;
Explanation:
    select the department id and Calucalte the total salary for each department

    




        


            






    




